// <auto-generated />
using System;
using ApiCouponProduct.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiCouponProduct.Migrations
{
    [DbContext(typeof(ApiCouponProductContext))]
    [Migration("20240815143820_ApiCouponProduct")]
    partial class ApiCouponProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiCouponProduct.Domain.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountOfDiscount")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("MaxNumberOfUses")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TypeOfDiscount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountOfDiscount = 111.0,
                            Code = "TestInRange",
                            EndDate = new DateTimeOffset(new DateTime(2026, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxNumberOfUses = 323L,
                            StartDate = new DateTimeOffset(new DateTime(2022, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            TypeOfDiscount = 2
                        },
                        new
                        {
                            Id = 2,
                            AmountOfDiscount = 22.0,
                            Code = "TestOutOfRange",
                            EndDate = new DateTimeOffset(new DateTime(2020, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxNumberOfUses = 32L,
                            StartDate = new DateTimeOffset(new DateTime(2022, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            TypeOfDiscount = 2
                        },
                        new
                        {
                            Id = 3,
                            AmountOfDiscount = 25.0,
                            Code = "Test",
                            EndDate = new DateTimeOffset(new DateTime(2026, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxNumberOfUses = 670L,
                            StartDate = new DateTimeOffset(new DateTime(2022, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            TypeOfDiscount = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountOfDiscount = 50.0,
                            Code = "Testing",
                            EndDate = new DateTimeOffset(new DateTime(2026, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxNumberOfUses = 554L,
                            StartDate = new DateTimeOffset(new DateTime(2022, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            TypeOfDiscount = 1
                        },
                        new
                        {
                            Id = 5,
                            AmountOfDiscount = 75.0,
                            Code = "TestMaxNumberOfUses",
                            EndDate = new DateTimeOffset(new DateTime(2026, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxNumberOfUses = 0L,
                            StartDate = new DateTimeOffset(new DateTime(2022, 1, 1, 12, 12, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            TypeOfDiscount = 1
                        });
                });

            modelBuilder.Entity("ApiCouponProduct.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            Name = "Persil",
                            Picture = "persil.jpg",
                            Price = 5.99m,
                            Producer = "Henkel"
                        },
                        new
                        {
                            Id = 2,
                            Category = 4,
                            Name = "Inkpad 4",
                            Picture = "inkpad4.jpg",
                            Price = 239.99m,
                            Producer = "Pocketbook"
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            Name = "Giotto",
                            Picture = "giotto.jpg",
                            Price = 2.99m,
                            Producer = "Ferrero"
                        },
                        new
                        {
                            Id = 4,
                            Category = 3,
                            Name = "Reis",
                            Picture = "reis.jpg",
                            Price = 0.99m,
                            Producer = "Bioland"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
